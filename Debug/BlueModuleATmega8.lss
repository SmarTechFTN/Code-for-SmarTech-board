
BlueModuleATmega8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000a42  00000ad6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000087  0080006c  0080006c  00000ae2  2**0
                  ALLOC
  3 .stab         00003714  00000000  00000000  00000ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001110  00000000  00000000  000041f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005308  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	d4 c2       	rjmp	.+1448   	; 0x5bc <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	45 c1       	rjmp	.+650    	; 0x2a2 <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	e1 c0       	rjmp	.+450    	; 0x1de <__vector_13>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e4       	ldi	r30, 0x42	; 66
  3a:	fa e0       	ldi	r31, 0x0A	; 10
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	ac e6       	ldi	r26, 0x6C	; 108
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a3 3f       	cpi	r26, 0xF3	; 243
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	8e d2       	rcall	.+1308   	; 0x576 <main>
  5a:	f1 c4       	rjmp	.+2530   	; 0xa3e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <initUsart>:
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	00 d0       	rcall	.+0      	; 0x64 <initUsart+0x6>
  64:	00 d0       	rcall	.+0      	; 0x66 <initUsart+0x8>
  66:	00 d0       	rcall	.+0      	; 0x68 <initUsart+0xa>
  68:	cd b7       	in	r28, 0x3d	; 61
  6a:	de b7       	in	r29, 0x3e	; 62
  6c:	6b 83       	std	Y+3, r22	; 0x03
  6e:	7c 83       	std	Y+4, r23	; 0x04
  70:	8d 83       	std	Y+5, r24	; 0x05
  72:	9e 83       	std	Y+6, r25	; 0x06
  74:	8b e2       	ldi	r24, 0x2B	; 43
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	fc 01       	movw	r30, r24
  7a:	10 82       	st	Z, r1
  7c:	8a e2       	ldi	r24, 0x2A	; 42
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	28 ed       	ldi	r18, 0xD8	; 216
  82:	fc 01       	movw	r30, r24
  84:	20 83       	st	Z, r18
  86:	80 e4       	ldi	r24, 0x40	; 64
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	26 e0       	ldi	r18, 0x06	; 6
  8c:	fc 01       	movw	r30, r24
  8e:	20 83       	st	Z, r18
  90:	8f e5       	ldi	r24, 0x5F	; 95
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	2f e5       	ldi	r18, 0x5F	; 95
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	f9 01       	movw	r30, r18
  9a:	20 81       	ld	r18, Z
  9c:	20 68       	ori	r18, 0x80	; 128
  9e:	fc 01       	movw	r30, r24
  a0:	20 83       	st	Z, r18
  a2:	6b 81       	ldd	r22, Y+3	; 0x03
  a4:	7c 81       	ldd	r23, Y+4	; 0x04
  a6:	8d 81       	ldd	r24, Y+5	; 0x05
  a8:	9e 81       	ldd	r25, Y+6	; 0x06
  aa:	b0 d3       	rcall	.+1888   	; 0x80c <__floatunsisf>
  ac:	dc 01       	movw	r26, r24
  ae:	cb 01       	movw	r24, r22
  b0:	20 e0       	ldi	r18, 0x00	; 0
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	40 e8       	ldi	r20, 0x80	; 128
  b6:	51 e4       	ldi	r21, 0x41	; 65
  b8:	bc 01       	movw	r22, r24
  ba:	cd 01       	movw	r24, r26
  bc:	5d d4       	rcall	.+2234   	; 0x978 <__mulsf3>
  be:	dc 01       	movw	r26, r24
  c0:	cb 01       	movw	r24, r22
  c2:	9c 01       	movw	r18, r24
  c4:	ad 01       	movw	r20, r26
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	74 e2       	ldi	r23, 0x24	; 36
  ca:	84 ef       	ldi	r24, 0xF4	; 244
  cc:	9a e4       	ldi	r25, 0x4A	; 74
  ce:	0a d3       	rcall	.+1556   	; 0x6e4 <__divsf3>
  d0:	dc 01       	movw	r26, r24
  d2:	cb 01       	movw	r24, r22
  d4:	20 e0       	ldi	r18, 0x00	; 0
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	40 e8       	ldi	r20, 0x80	; 128
  da:	5f e3       	ldi	r21, 0x3F	; 63
  dc:	bc 01       	movw	r22, r24
  de:	cd 01       	movw	r24, r26
  e0:	98 d2       	rcall	.+1328   	; 0x612 <__subsf3>
  e2:	dc 01       	movw	r26, r24
  e4:	cb 01       	movw	r24, r22
  e6:	bc 01       	movw	r22, r24
  e8:	cd 01       	movw	r24, r26
  ea:	64 d3       	rcall	.+1736   	; 0x7b4 <__fixunssfsi>
  ec:	dc 01       	movw	r26, r24
  ee:	cb 01       	movw	r24, r22
  f0:	9a 83       	std	Y+2, r25	; 0x02
  f2:	89 83       	std	Y+1, r24	; 0x01
  f4:	80 e4       	ldi	r24, 0x40	; 64
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	29 81       	ldd	r18, Y+1	; 0x01
  fa:	3a 81       	ldd	r19, Y+2	; 0x02
  fc:	23 2f       	mov	r18, r19
  fe:	33 27       	eor	r19, r19
 100:	fc 01       	movw	r30, r24
 102:	20 83       	st	Z, r18
 104:	89 e2       	ldi	r24, 0x29	; 41
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	29 81       	ldd	r18, Y+1	; 0x01
 10a:	fc 01       	movw	r30, r24
 10c:	20 83       	st	Z, r18
 10e:	26 96       	adiw	r28, 0x06	; 6
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	f8 94       	cli
 114:	de bf       	out	0x3e, r29	; 62
 116:	0f be       	out	0x3f, r0	; 63
 118:	cd bf       	out	0x3d, r28	; 61
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <writeUsart>:
static volatile unsigned char tx_buffer[TX_BUFFER_SIZE];
static volatile unsigned char tx_wr_index=0;
static volatile unsigned char tx_counter=0;
static volatile unsigned char tx_rd_index=0;

void writeUsart(unsigned char data){
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	1f 92       	push	r1
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
 12a:	89 83       	std	Y+1, r24	; 0x01

	while(tx_counter == TX_BUFFER_SIZE);
 12c:	00 00       	nop
 12e:	80 91 ad 00 	lds	r24, 0x00AD
 132:	80 34       	cpi	r24, 0x40	; 64
 134:	e1 f3       	breq	.-8      	; 0x12e <writeUsart+0xe>
	cli();
 136:	f8 94       	cli

	if(!(UCSRA >> UDRE))
 138:	8b e2       	ldi	r24, 0x2B	; 43
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	fc 01       	movw	r30, r24
 13e:	80 81       	ld	r24, Z
 140:	82 95       	swap	r24
 142:	86 95       	lsr	r24
 144:	87 70       	andi	r24, 0x07	; 7
 146:	88 23       	and	r24, r24
 148:	c1 f4       	brne	.+48     	; 0x17a <writeUsart+0x5a>
	{
		tx_buffer[tx_wr_index] = data;
 14a:	80 91 ac 00 	lds	r24, 0x00AC
 14e:	88 2f       	mov	r24, r24
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	84 59       	subi	r24, 0x94	; 148
 154:	9f 4f       	sbci	r25, 0xFF	; 255
 156:	29 81       	ldd	r18, Y+1	; 0x01
 158:	fc 01       	movw	r30, r24
 15a:	20 83       	st	Z, r18
		if(++tx_wr_index == TX_BUFFER_SIZE)
 15c:	80 91 ac 00 	lds	r24, 0x00AC
 160:	8f 5f       	subi	r24, 0xFF	; 255
 162:	80 93 ac 00 	sts	0x00AC, r24
 166:	80 34       	cpi	r24, 0x40	; 64
 168:	11 f4       	brne	.+4      	; 0x16e <writeUsart+0x4e>
			tx_wr_index=0;
 16a:	10 92 ac 00 	sts	0x00AC, r1

		tx_counter++;
 16e:	80 91 ad 00 	lds	r24, 0x00AD
 172:	8f 5f       	subi	r24, 0xFF	; 255
 174:	80 93 ad 00 	sts	0x00AD, r24
 178:	05 c0       	rjmp	.+10     	; 0x184 <writeUsart+0x64>
	}
	else{
		UDR=data;
 17a:	8c e2       	ldi	r24, 0x2C	; 44
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	29 81       	ldd	r18, Y+1	; 0x01
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18
	}
	sei();
 184:	78 94       	sei
}
 186:	0f 90       	pop	r0
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <writeUsartString>:

void writeUsartString(unsigned char* data){
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	00 d0       	rcall	.+0      	; 0x194 <writeUsartString+0x6>
 194:	1f 92       	push	r1
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 19a:	9b 83       	std	Y+3, r25	; 0x03
 19c:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char i=0;
 19e:	19 82       	std	Y+1, r1	; 0x01
	while(data[i] != 0x00)
 1a0:	0d c0       	rjmp	.+26     	; 0x1bc <writeUsartString+0x2e>
	{
		writeUsart(data[i]);
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
 1a4:	88 2f       	mov	r24, r24
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	2a 81       	ldd	r18, Y+2	; 0x02
 1aa:	3b 81       	ldd	r19, Y+3	; 0x03
 1ac:	82 0f       	add	r24, r18
 1ae:	93 1f       	adc	r25, r19
 1b0:	fc 01       	movw	r30, r24
 1b2:	80 81       	ld	r24, Z
 1b4:	b5 df       	rcall	.-150    	; 0x120 <writeUsart>
		i++;
 1b6:	89 81       	ldd	r24, Y+1	; 0x01
 1b8:	8f 5f       	subi	r24, 0xFF	; 255
 1ba:	89 83       	std	Y+1, r24	; 0x01
	sei();
}

void writeUsartString(unsigned char* data){
	unsigned char i=0;
	while(data[i] != 0x00)
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	88 2f       	mov	r24, r24
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	2a 81       	ldd	r18, Y+2	; 0x02
 1c4:	3b 81       	ldd	r19, Y+3	; 0x03
 1c6:	82 0f       	add	r24, r18
 1c8:	93 1f       	adc	r25, r19
 1ca:	fc 01       	movw	r30, r24
 1cc:	80 81       	ld	r24, Z
 1ce:	88 23       	and	r24, r24
 1d0:	41 f7       	brne	.-48     	; 0x1a2 <writeUsartString+0x14>
	{
		writeUsart(data[i]);
		i++;
	}
}
 1d2:	0f 90       	pop	r0
 1d4:	0f 90       	pop	r0
 1d6:	0f 90       	pop	r0
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <__vector_13>:

ISR(USART_TXC_vect){
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	00 90 5f 00 	lds	r0, 0x005F
 1e6:	0f 92       	push	r0
 1e8:	11 24       	eor	r1, r1
 1ea:	2f 93       	push	r18
 1ec:	3f 93       	push	r19
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
 1f2:	ef 93       	push	r30
 1f4:	ff 93       	push	r31
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62

	if(tx_counter)
 1fe:	80 91 ad 00 	lds	r24, 0x00AD
 202:	88 23       	and	r24, r24
 204:	d1 f0       	breq	.+52     	; 0x23a <__vector_13+0x5c>
	{
		tx_counter--;
 206:	80 91 ad 00 	lds	r24, 0x00AD
 20a:	81 50       	subi	r24, 0x01	; 1
 20c:	80 93 ad 00 	sts	0x00AD, r24
		UDR = tx_buffer[tx_rd_index];
 210:	8c e2       	ldi	r24, 0x2C	; 44
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	20 91 ae 00 	lds	r18, 0x00AE
 218:	22 2f       	mov	r18, r18
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	24 59       	subi	r18, 0x94	; 148
 21e:	3f 4f       	sbci	r19, 0xFF	; 255
 220:	f9 01       	movw	r30, r18
 222:	20 81       	ld	r18, Z
 224:	fc 01       	movw	r30, r24
 226:	20 83       	st	Z, r18
		if(++tx_rd_index == TX_BUFFER_SIZE)
 228:	80 91 ae 00 	lds	r24, 0x00AE
 22c:	8f 5f       	subi	r24, 0xFF	; 255
 22e:	80 93 ae 00 	sts	0x00AE, r24
 232:	80 34       	cpi	r24, 0x40	; 64
 234:	11 f4       	brne	.+4      	; 0x23a <__vector_13+0x5c>
			tx_rd_index = 0;
 236:	10 92 ae 00 	sts	0x00AE, r1

	}
}
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	ff 91       	pop	r31
 240:	ef 91       	pop	r30
 242:	9f 91       	pop	r25
 244:	8f 91       	pop	r24
 246:	3f 91       	pop	r19
 248:	2f 91       	pop	r18
 24a:	0f 90       	pop	r0
 24c:	00 92 5f 00 	sts	0x005F, r0
 250:	0f 90       	pop	r0
 252:	1f 90       	pop	r1
 254:	18 95       	reti

00000256 <readUsart>:
static volatile unsigned char rx_buffer[TX_BUFFER_SIZE];
static volatile unsigned char rx_wr_index=0;
static volatile unsigned char rx_counter=0;
static volatile unsigned char rx_rd_index=0;

unsigned char readUsart(){
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	1f 92       	push	r1
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	while(rx_counter==0);
 260:	00 00       	nop
 262:	80 91 f0 00 	lds	r24, 0x00F0
 266:	88 23       	and	r24, r24
 268:	e1 f3       	breq	.-8      	; 0x262 <readUsart+0xc>

	data = rx_buffer[rx_rd_index];
 26a:	80 91 f1 00 	lds	r24, 0x00F1
 26e:	88 2f       	mov	r24, r24
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	81 55       	subi	r24, 0x51	; 81
 274:	9f 4f       	sbci	r25, 0xFF	; 255
 276:	fc 01       	movw	r30, r24
 278:	80 81       	ld	r24, Z
 27a:	89 83       	std	Y+1, r24	; 0x01
	if(++rx_rd_index == RX_BUFFER_SIZE)
 27c:	80 91 f1 00 	lds	r24, 0x00F1
 280:	8f 5f       	subi	r24, 0xFF	; 255
 282:	80 93 f1 00 	sts	0x00F1, r24
 286:	80 34       	cpi	r24, 0x40	; 64
 288:	11 f4       	brne	.+4      	; 0x28e <readUsart+0x38>
		rx_rd_index=0;
 28a:	10 92 f1 00 	sts	0x00F1, r1

	rx_counter--;
 28e:	80 91 f0 00 	lds	r24, 0x00F0
 292:	81 50       	subi	r24, 0x01	; 1
 294:	80 93 f0 00 	sts	0x00F0, r24
	return data;
 298:	89 81       	ldd	r24, Y+1	; 0x01
}
 29a:	0f 90       	pop	r0
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <__vector_11>:

ISR(USART_RXC_vect){
 2a2:	1f 92       	push	r1
 2a4:	0f 92       	push	r0
 2a6:	00 90 5f 00 	lds	r0, 0x005F
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	2f 93       	push	r18
 2b0:	3f 93       	push	r19
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
 2b6:	ef 93       	push	r30
 2b8:	ff 93       	push	r31
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	1f 92       	push	r1
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSRA;
 2c4:	8b e2       	ldi	r24, 0x2B	; 43
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	fc 01       	movw	r30, r24
 2ca:	80 81       	ld	r24, Z
 2cc:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & ((1 << FE) | (1 << DOR) | (1 <<  PE))))
 2ce:	89 81       	ldd	r24, Y+1	; 0x01
 2d0:	88 2f       	mov	r24, r24
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	8c 71       	andi	r24, 0x1C	; 28
 2d6:	99 27       	eor	r25, r25
 2d8:	00 97       	sbiw	r24, 0x00	; 0
 2da:	d1 f4       	brne	.+52     	; 0x310 <__vector_11+0x6e>
	{
		rx_buffer[rx_wr_index] = UDR;
 2dc:	80 91 ef 00 	lds	r24, 0x00EF
 2e0:	88 2f       	mov	r24, r24
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	2c e2       	ldi	r18, 0x2C	; 44
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	f9 01       	movw	r30, r18
 2ea:	20 81       	ld	r18, Z
 2ec:	81 55       	subi	r24, 0x51	; 81
 2ee:	9f 4f       	sbci	r25, 0xFF	; 255
 2f0:	fc 01       	movw	r30, r24
 2f2:	20 83       	st	Z, r18
		if(++rx_wr_index == RX_BUFFER_SIZE)
 2f4:	80 91 ef 00 	lds	r24, 0x00EF
 2f8:	8f 5f       	subi	r24, 0xFF	; 255
 2fa:	80 93 ef 00 	sts	0x00EF, r24
 2fe:	80 34       	cpi	r24, 0x40	; 64
 300:	11 f4       	brne	.+4      	; 0x306 <__vector_11+0x64>
			rx_wr_index = 0;
 302:	10 92 ef 00 	sts	0x00EF, r1

		rx_counter++;
 306:	80 91 f0 00 	lds	r24, 0x00F0
 30a:	8f 5f       	subi	r24, 0xFF	; 255
 30c:	80 93 f0 00 	sts	0x00F0, r24
	}
}
 310:	0f 90       	pop	r0
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	ff 91       	pop	r31
 318:	ef 91       	pop	r30
 31a:	9f 91       	pop	r25
 31c:	8f 91       	pop	r24
 31e:	3f 91       	pop	r19
 320:	2f 91       	pop	r18
 322:	0f 90       	pop	r0
 324:	00 92 5f 00 	sts	0x005F, r0
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <initProg>:
 *      Author: Marko Kozomora
 */

#include "macros.h"

void initProg(unsigned long baud){
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	cd b7       	in	r28, 0x3d	; 61
 334:	de b7       	in	r29, 0x3e	; 62
 336:	a0 97       	sbiw	r28, 0x20	; 32
 338:	0f b6       	in	r0, 0x3f	; 63
 33a:	f8 94       	cli
 33c:	de bf       	out	0x3e, r29	; 62
 33e:	0f be       	out	0x3f, r0	; 63
 340:	cd bf       	out	0x3d, r28	; 61
 342:	6d 8f       	std	Y+29, r22	; 0x1d
 344:	7e 8f       	std	Y+30, r23	; 0x1e
 346:	8f 8f       	std	Y+31, r24	; 0x1f
 348:	98 a3       	std	Y+32, r25	; 0x20
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	a0 e2       	ldi	r26, 0x20	; 32
 350:	b1 e4       	ldi	r27, 0x41	; 65
 352:	89 83       	std	Y+1, r24	; 0x01
 354:	9a 83       	std	Y+2, r25	; 0x02
 356:	ab 83       	std	Y+3, r26	; 0x03
 358:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 35a:	20 e0       	ldi	r18, 0x00	; 0
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	4a ef       	ldi	r20, 0xFA	; 250
 360:	54 e4       	ldi	r21, 0x44	; 68
 362:	69 81       	ldd	r22, Y+1	; 0x01
 364:	7a 81       	ldd	r23, Y+2	; 0x02
 366:	8b 81       	ldd	r24, Y+3	; 0x03
 368:	9c 81       	ldd	r25, Y+4	; 0x04
 36a:	06 d3       	rcall	.+1548   	; 0x978 <__mulsf3>
 36c:	dc 01       	movw	r26, r24
 36e:	cb 01       	movw	r24, r22
 370:	8d 83       	std	Y+5, r24	; 0x05
 372:	9e 83       	std	Y+6, r25	; 0x06
 374:	af 83       	std	Y+7, r26	; 0x07
 376:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 378:	20 e0       	ldi	r18, 0x00	; 0
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	40 e8       	ldi	r20, 0x80	; 128
 37e:	5f e3       	ldi	r21, 0x3F	; 63
 380:	6d 81       	ldd	r22, Y+5	; 0x05
 382:	7e 81       	ldd	r23, Y+6	; 0x06
 384:	8f 81       	ldd	r24, Y+7	; 0x07
 386:	98 85       	ldd	r25, Y+8	; 0x08
 388:	a9 d1       	rcall	.+850    	; 0x6dc <__cmpsf2>
 38a:	88 23       	and	r24, r24
 38c:	2c f4       	brge	.+10     	; 0x398 <initProg+0x6a>
		__ticks = 1;
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	9a 87       	std	Y+10, r25	; 0x0a
 394:	89 87       	std	Y+9, r24	; 0x09
 396:	3b c0       	rjmp	.+118    	; 0x40e <initProg+0xe0>
	else if (__tmp > 65535)
 398:	20 e0       	ldi	r18, 0x00	; 0
 39a:	3f ef       	ldi	r19, 0xFF	; 255
 39c:	4f e7       	ldi	r20, 0x7F	; 127
 39e:	57 e4       	ldi	r21, 0x47	; 71
 3a0:	6d 81       	ldd	r22, Y+5	; 0x05
 3a2:	7e 81       	ldd	r23, Y+6	; 0x06
 3a4:	8f 81       	ldd	r24, Y+7	; 0x07
 3a6:	98 85       	ldd	r25, Y+8	; 0x08
 3a8:	e3 d2       	rcall	.+1478   	; 0x970 <__gesf2>
 3aa:	18 16       	cp	r1, r24
 3ac:	3c f5       	brge	.+78     	; 0x3fc <initProg+0xce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3ae:	20 e0       	ldi	r18, 0x00	; 0
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	40 e2       	ldi	r20, 0x20	; 32
 3b4:	51 e4       	ldi	r21, 0x41	; 65
 3b6:	69 81       	ldd	r22, Y+1	; 0x01
 3b8:	7a 81       	ldd	r23, Y+2	; 0x02
 3ba:	8b 81       	ldd	r24, Y+3	; 0x03
 3bc:	9c 81       	ldd	r25, Y+4	; 0x04
 3be:	dc d2       	rcall	.+1464   	; 0x978 <__mulsf3>
 3c0:	dc 01       	movw	r26, r24
 3c2:	cb 01       	movw	r24, r22
 3c4:	bc 01       	movw	r22, r24
 3c6:	cd 01       	movw	r24, r26
 3c8:	f5 d1       	rcall	.+1002   	; 0x7b4 <__fixunssfsi>
 3ca:	dc 01       	movw	r26, r24
 3cc:	cb 01       	movw	r24, r22
 3ce:	9a 87       	std	Y+10, r25	; 0x0a
 3d0:	89 87       	std	Y+9, r24	; 0x09
 3d2:	0f c0       	rjmp	.+30     	; 0x3f2 <initProg+0xc4>
 3d4:	88 ec       	ldi	r24, 0xC8	; 200
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	9c 87       	std	Y+12, r25	; 0x0c
 3da:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3dc:	8b 85       	ldd	r24, Y+11	; 0x0b
 3de:	9c 85       	ldd	r25, Y+12	; 0x0c
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <initProg+0xb2>
 3e4:	9c 87       	std	Y+12, r25	; 0x0c
 3e6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3e8:	89 85       	ldd	r24, Y+9	; 0x09
 3ea:	9a 85       	ldd	r25, Y+10	; 0x0a
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	9a 87       	std	Y+10, r25	; 0x0a
 3f0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3f2:	89 85       	ldd	r24, Y+9	; 0x09
 3f4:	9a 85       	ldd	r25, Y+10	; 0x0a
 3f6:	00 97       	sbiw	r24, 0x00	; 0
 3f8:	69 f7       	brne	.-38     	; 0x3d4 <initProg+0xa6>
 3fa:	13 c0       	rjmp	.+38     	; 0x422 <initProg+0xf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3fc:	6d 81       	ldd	r22, Y+5	; 0x05
 3fe:	7e 81       	ldd	r23, Y+6	; 0x06
 400:	8f 81       	ldd	r24, Y+7	; 0x07
 402:	98 85       	ldd	r25, Y+8	; 0x08
 404:	d7 d1       	rcall	.+942    	; 0x7b4 <__fixunssfsi>
 406:	dc 01       	movw	r26, r24
 408:	cb 01       	movw	r24, r22
 40a:	9a 87       	std	Y+10, r25	; 0x0a
 40c:	89 87       	std	Y+9, r24	; 0x09
 40e:	89 85       	ldd	r24, Y+9	; 0x09
 410:	9a 85       	ldd	r25, Y+10	; 0x0a
 412:	9e 87       	std	Y+14, r25	; 0x0e
 414:	8d 87       	std	Y+13, r24	; 0x0d
 416:	8d 85       	ldd	r24, Y+13	; 0x0d
 418:	9e 85       	ldd	r25, Y+14	; 0x0e
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <initProg+0xec>
 41e:	9e 87       	std	Y+14, r25	; 0x0e
 420:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(10);
	initUsart(baud);
 422:	8d 8d       	ldd	r24, Y+29	; 0x1d
 424:	9e 8d       	ldd	r25, Y+30	; 0x1e
 426:	af 8d       	ldd	r26, Y+31	; 0x1f
 428:	b8 a1       	ldd	r27, Y+32	; 0x20
 42a:	bc 01       	movw	r22, r24
 42c:	cd 01       	movw	r24, r26
 42e:	17 de       	rcall	.-978    	; 0x5e <initUsart>
	initTimer();
 430:	ac d0       	rcall	.+344    	; 0x58a <initTimer>
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	a0 e2       	ldi	r26, 0x20	; 32
 438:	b1 e4       	ldi	r27, 0x41	; 65
 43a:	8f 87       	std	Y+15, r24	; 0x0f
 43c:	98 8b       	std	Y+16, r25	; 0x10
 43e:	a9 8b       	std	Y+17, r26	; 0x11
 440:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 442:	20 e0       	ldi	r18, 0x00	; 0
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	4a ef       	ldi	r20, 0xFA	; 250
 448:	54 e4       	ldi	r21, 0x44	; 68
 44a:	6f 85       	ldd	r22, Y+15	; 0x0f
 44c:	78 89       	ldd	r23, Y+16	; 0x10
 44e:	89 89       	ldd	r24, Y+17	; 0x11
 450:	9a 89       	ldd	r25, Y+18	; 0x12
 452:	92 d2       	rcall	.+1316   	; 0x978 <__mulsf3>
 454:	dc 01       	movw	r26, r24
 456:	cb 01       	movw	r24, r22
 458:	8b 8b       	std	Y+19, r24	; 0x13
 45a:	9c 8b       	std	Y+20, r25	; 0x14
 45c:	ad 8b       	std	Y+21, r26	; 0x15
 45e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 460:	20 e0       	ldi	r18, 0x00	; 0
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	40 e8       	ldi	r20, 0x80	; 128
 466:	5f e3       	ldi	r21, 0x3F	; 63
 468:	6b 89       	ldd	r22, Y+19	; 0x13
 46a:	7c 89       	ldd	r23, Y+20	; 0x14
 46c:	8d 89       	ldd	r24, Y+21	; 0x15
 46e:	9e 89       	ldd	r25, Y+22	; 0x16
 470:	35 d1       	rcall	.+618    	; 0x6dc <__cmpsf2>
 472:	88 23       	and	r24, r24
 474:	2c f4       	brge	.+10     	; 0x480 <__stack+0x21>
		__ticks = 1;
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	98 8f       	std	Y+24, r25	; 0x18
 47c:	8f 8b       	std	Y+23, r24	; 0x17
 47e:	3b c0       	rjmp	.+118    	; 0x4f6 <__stack+0x97>
	else if (__tmp > 65535)
 480:	20 e0       	ldi	r18, 0x00	; 0
 482:	3f ef       	ldi	r19, 0xFF	; 255
 484:	4f e7       	ldi	r20, 0x7F	; 127
 486:	57 e4       	ldi	r21, 0x47	; 71
 488:	6b 89       	ldd	r22, Y+19	; 0x13
 48a:	7c 89       	ldd	r23, Y+20	; 0x14
 48c:	8d 89       	ldd	r24, Y+21	; 0x15
 48e:	9e 89       	ldd	r25, Y+22	; 0x16
 490:	6f d2       	rcall	.+1246   	; 0x970 <__gesf2>
 492:	18 16       	cp	r1, r24
 494:	3c f5       	brge	.+78     	; 0x4e4 <__stack+0x85>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 496:	20 e0       	ldi	r18, 0x00	; 0
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	40 e2       	ldi	r20, 0x20	; 32
 49c:	51 e4       	ldi	r21, 0x41	; 65
 49e:	6f 85       	ldd	r22, Y+15	; 0x0f
 4a0:	78 89       	ldd	r23, Y+16	; 0x10
 4a2:	89 89       	ldd	r24, Y+17	; 0x11
 4a4:	9a 89       	ldd	r25, Y+18	; 0x12
 4a6:	68 d2       	rcall	.+1232   	; 0x978 <__mulsf3>
 4a8:	dc 01       	movw	r26, r24
 4aa:	cb 01       	movw	r24, r22
 4ac:	bc 01       	movw	r22, r24
 4ae:	cd 01       	movw	r24, r26
 4b0:	81 d1       	rcall	.+770    	; 0x7b4 <__fixunssfsi>
 4b2:	dc 01       	movw	r26, r24
 4b4:	cb 01       	movw	r24, r22
 4b6:	98 8f       	std	Y+24, r25	; 0x18
 4b8:	8f 8b       	std	Y+23, r24	; 0x17
 4ba:	0f c0       	rjmp	.+30     	; 0x4da <__stack+0x7b>
 4bc:	88 ec       	ldi	r24, 0xC8	; 200
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	9a 8f       	std	Y+26, r25	; 0x1a
 4c2:	89 8f       	std	Y+25, r24	; 0x19
 4c4:	89 8d       	ldd	r24, Y+25	; 0x19
 4c6:	9a 8d       	ldd	r25, Y+26	; 0x1a
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <__stack+0x69>
 4cc:	9a 8f       	std	Y+26, r25	; 0x1a
 4ce:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4d0:	8f 89       	ldd	r24, Y+23	; 0x17
 4d2:	98 8d       	ldd	r25, Y+24	; 0x18
 4d4:	01 97       	sbiw	r24, 0x01	; 1
 4d6:	98 8f       	std	Y+24, r25	; 0x18
 4d8:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4da:	8f 89       	ldd	r24, Y+23	; 0x17
 4dc:	98 8d       	ldd	r25, Y+24	; 0x18
 4de:	00 97       	sbiw	r24, 0x00	; 0
 4e0:	69 f7       	brne	.-38     	; 0x4bc <__stack+0x5d>
 4e2:	13 c0       	rjmp	.+38     	; 0x50a <__stack+0xab>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 4e4:	6b 89       	ldd	r22, Y+19	; 0x13
 4e6:	7c 89       	ldd	r23, Y+20	; 0x14
 4e8:	8d 89       	ldd	r24, Y+21	; 0x15
 4ea:	9e 89       	ldd	r25, Y+22	; 0x16
 4ec:	63 d1       	rcall	.+710    	; 0x7b4 <__fixunssfsi>
 4ee:	dc 01       	movw	r26, r24
 4f0:	cb 01       	movw	r24, r22
 4f2:	98 8f       	std	Y+24, r25	; 0x18
 4f4:	8f 8b       	std	Y+23, r24	; 0x17
 4f6:	8f 89       	ldd	r24, Y+23	; 0x17
 4f8:	98 8d       	ldd	r25, Y+24	; 0x18
 4fa:	9c 8f       	std	Y+28, r25	; 0x1c
 4fc:	8b 8f       	std	Y+27, r24	; 0x1b
 4fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
 500:	9c 8d       	ldd	r25, Y+28	; 0x1c
 502:	01 97       	sbiw	r24, 0x01	; 1
 504:	f1 f7       	brne	.-4      	; 0x502 <__stack+0xa3>
 506:	9c 8f       	std	Y+28, r25	; 0x1c
 508:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(10);
	//Set pin CO as a output for toggle relay
	RELAY_DDR |= (1 << RELAY_PIN);
 50a:	84 e3       	ldi	r24, 0x34	; 52
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	24 e3       	ldi	r18, 0x34	; 52
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	f9 01       	movw	r30, r18
 514:	20 81       	ld	r18, Z
 516:	21 60       	ori	r18, 0x01	; 1
 518:	fc 01       	movw	r30, r24
 51a:	20 83       	st	Z, r18
	RELAY_PORT = (1 << RELAY_PIN);
 51c:	85 e3       	ldi	r24, 0x35	; 53
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	21 e0       	ldi	r18, 0x01	; 1
 522:	fc 01       	movw	r30, r24
 524:	20 83       	st	Z, r18

}
 526:	a0 96       	adiw	r28, 0x20	; 32
 528:	0f b6       	in	r0, 0x3f	; 63
 52a:	f8 94       	cli
 52c:	de bf       	out	0x3e, r29	; 62
 52e:	0f be       	out	0x3f, r0	; 63
 530:	cd bf       	out	0x3d, r28	; 61
 532:	df 91       	pop	r29
 534:	cf 91       	pop	r28
 536:	08 95       	ret

00000538 <toggleSocket>:

void toggleSocket(){
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
 53c:	cd b7       	in	r28, 0x3d	; 61
 53e:	de b7       	in	r29, 0x3e	; 62

	temp = readUsart();
 540:	8a de       	rcall	.-748    	; 0x256 <readUsart>
 542:	80 93 f2 00 	sts	0x00F2, r24
	if(temp == 'H'){
 546:	80 91 f2 00 	lds	r24, 0x00F2
 54a:	88 34       	cpi	r24, 0x48	; 72
 54c:	71 f4       	brne	.+28     	; 0x56a <toggleSocket+0x32>
		RELAY_PORT ^= (1 << RELAY_PIN);
 54e:	85 e3       	ldi	r24, 0x35	; 53
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	25 e3       	ldi	r18, 0x35	; 53
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	f9 01       	movw	r30, r18
 558:	30 81       	ld	r19, Z
 55a:	21 e0       	ldi	r18, 0x01	; 1
 55c:	23 27       	eor	r18, r19
 55e:	fc 01       	movw	r30, r24
 560:	20 83       	st	Z, r18
		writeUsartString("OK");
 562:	80 e6       	ldi	r24, 0x60	; 96
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	13 de       	rcall	.-986    	; 0x18e <writeUsartString>
 568:	03 c0       	rjmp	.+6      	; 0x570 <toggleSocket+0x38>
	}
	else
		writeUsartString("PROBLEM");
 56a:	83 e6       	ldi	r24, 0x63	; 99
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0f de       	rcall	.-994    	; 0x18e <writeUsartString>
}
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	08 95       	ret

00000576 <main>:
 *      Author: Marko Kozomora
 */
#include "macros.h"

int main()
{
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	cd b7       	in	r28, 0x3d	; 61
 57c:	de b7       	in	r29, 0x3e	; 62
	initProg(9600);
 57e:	60 e8       	ldi	r22, 0x80	; 128
 580:	75 e2       	ldi	r23, 0x25	; 37
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	d3 de       	rcall	.-602    	; 0x32e <initProg>
	while(1)
	{
	}
 588:	ff cf       	rjmp	.-2      	; 0x588 <main+0x12>

0000058a <initTimer>:
 *      Author: Marko Kozomora
 */

#include "macros.h"

void initTimer() {
 58a:	cf 93       	push	r28
 58c:	df 93       	push	r29
 58e:	cd b7       	in	r28, 0x3d	; 61
 590:	de b7       	in	r29, 0x3e	; 62

	TIMSK |= (1 << TOIE0);
 592:	89 e5       	ldi	r24, 0x59	; 89
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	29 e5       	ldi	r18, 0x59	; 89
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	f9 01       	movw	r30, r18
 59c:	20 81       	ld	r18, Z
 59e:	21 60       	ori	r18, 0x01	; 1
 5a0:	fc 01       	movw	r30, r24
 5a2:	20 83       	st	Z, r18
	TCCR0 |= (1 << CS02) | (1 << CS00);
 5a4:	83 e5       	ldi	r24, 0x53	; 83
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	23 e5       	ldi	r18, 0x53	; 83
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	f9 01       	movw	r30, r18
 5ae:	20 81       	ld	r18, Z
 5b0:	25 60       	ori	r18, 0x05	; 5
 5b2:	fc 01       	movw	r30, r24
 5b4:	20 83       	st	Z, r18
}
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	08 95       	ret

000005bc <__vector_9>:

ISR (TIMER0_OVF_vect){
 5bc:	1f 92       	push	r1
 5be:	0f 92       	push	r0
 5c0:	00 90 5f 00 	lds	r0, 0x005F
 5c4:	0f 92       	push	r0
 5c6:	11 24       	eor	r1, r1
 5c8:	2f 93       	push	r18
 5ca:	3f 93       	push	r19
 5cc:	4f 93       	push	r20
 5ce:	5f 93       	push	r21
 5d0:	6f 93       	push	r22
 5d2:	7f 93       	push	r23
 5d4:	8f 93       	push	r24
 5d6:	9f 93       	push	r25
 5d8:	af 93       	push	r26
 5da:	bf 93       	push	r27
 5dc:	ef 93       	push	r30
 5de:	ff 93       	push	r31
 5e0:	cf 93       	push	r28
 5e2:	df 93       	push	r29
 5e4:	cd b7       	in	r28, 0x3d	; 61
 5e6:	de b7       	in	r29, 0x3e	; 62
	toggleSocket();
 5e8:	a7 df       	rcall	.-178    	; 0x538 <toggleSocket>
}
 5ea:	df 91       	pop	r29
 5ec:	cf 91       	pop	r28
 5ee:	ff 91       	pop	r31
 5f0:	ef 91       	pop	r30
 5f2:	bf 91       	pop	r27
 5f4:	af 91       	pop	r26
 5f6:	9f 91       	pop	r25
 5f8:	8f 91       	pop	r24
 5fa:	7f 91       	pop	r23
 5fc:	6f 91       	pop	r22
 5fe:	5f 91       	pop	r21
 600:	4f 91       	pop	r20
 602:	3f 91       	pop	r19
 604:	2f 91       	pop	r18
 606:	0f 90       	pop	r0
 608:	00 92 5f 00 	sts	0x005F, r0
 60c:	0f 90       	pop	r0
 60e:	1f 90       	pop	r1
 610:	18 95       	reti

00000612 <__subsf3>:
 612:	50 58       	subi	r21, 0x80	; 128

00000614 <__addsf3>:
 614:	bb 27       	eor	r27, r27
 616:	aa 27       	eor	r26, r26
 618:	0e d0       	rcall	.+28     	; 0x636 <__addsf3x>
 61a:	70 c1       	rjmp	.+736    	; 0x8fc <__fp_round>
 61c:	61 d1       	rcall	.+706    	; 0x8e0 <__fp_pscA>
 61e:	30 f0       	brcs	.+12     	; 0x62c <__addsf3+0x18>
 620:	66 d1       	rcall	.+716    	; 0x8ee <__fp_pscB>
 622:	20 f0       	brcs	.+8      	; 0x62c <__addsf3+0x18>
 624:	31 f4       	brne	.+12     	; 0x632 <__addsf3+0x1e>
 626:	9f 3f       	cpi	r25, 0xFF	; 255
 628:	11 f4       	brne	.+4      	; 0x62e <__addsf3+0x1a>
 62a:	1e f4       	brtc	.+6      	; 0x632 <__addsf3+0x1e>
 62c:	56 c1       	rjmp	.+684    	; 0x8da <__fp_nan>
 62e:	0e f4       	brtc	.+2      	; 0x632 <__addsf3+0x1e>
 630:	e0 95       	com	r30
 632:	e7 fb       	bst	r30, 7
 634:	4c c1       	rjmp	.+664    	; 0x8ce <__fp_inf>

00000636 <__addsf3x>:
 636:	e9 2f       	mov	r30, r25
 638:	72 d1       	rcall	.+740    	; 0x91e <__fp_split3>
 63a:	80 f3       	brcs	.-32     	; 0x61c <__addsf3+0x8>
 63c:	ba 17       	cp	r27, r26
 63e:	62 07       	cpc	r22, r18
 640:	73 07       	cpc	r23, r19
 642:	84 07       	cpc	r24, r20
 644:	95 07       	cpc	r25, r21
 646:	18 f0       	brcs	.+6      	; 0x64e <__addsf3x+0x18>
 648:	71 f4       	brne	.+28     	; 0x666 <__addsf3x+0x30>
 64a:	9e f5       	brtc	.+102    	; 0x6b2 <__addsf3x+0x7c>
 64c:	8a c1       	rjmp	.+788    	; 0x962 <__fp_zero>
 64e:	0e f4       	brtc	.+2      	; 0x652 <__addsf3x+0x1c>
 650:	e0 95       	com	r30
 652:	0b 2e       	mov	r0, r27
 654:	ba 2f       	mov	r27, r26
 656:	a0 2d       	mov	r26, r0
 658:	0b 01       	movw	r0, r22
 65a:	b9 01       	movw	r22, r18
 65c:	90 01       	movw	r18, r0
 65e:	0c 01       	movw	r0, r24
 660:	ca 01       	movw	r24, r20
 662:	a0 01       	movw	r20, r0
 664:	11 24       	eor	r1, r1
 666:	ff 27       	eor	r31, r31
 668:	59 1b       	sub	r21, r25
 66a:	99 f0       	breq	.+38     	; 0x692 <__addsf3x+0x5c>
 66c:	59 3f       	cpi	r21, 0xF9	; 249
 66e:	50 f4       	brcc	.+20     	; 0x684 <__addsf3x+0x4e>
 670:	50 3e       	cpi	r21, 0xE0	; 224
 672:	68 f1       	brcs	.+90     	; 0x6ce <__addsf3x+0x98>
 674:	1a 16       	cp	r1, r26
 676:	f0 40       	sbci	r31, 0x00	; 0
 678:	a2 2f       	mov	r26, r18
 67a:	23 2f       	mov	r18, r19
 67c:	34 2f       	mov	r19, r20
 67e:	44 27       	eor	r20, r20
 680:	58 5f       	subi	r21, 0xF8	; 248
 682:	f3 cf       	rjmp	.-26     	; 0x66a <__addsf3x+0x34>
 684:	46 95       	lsr	r20
 686:	37 95       	ror	r19
 688:	27 95       	ror	r18
 68a:	a7 95       	ror	r26
 68c:	f0 40       	sbci	r31, 0x00	; 0
 68e:	53 95       	inc	r21
 690:	c9 f7       	brne	.-14     	; 0x684 <__addsf3x+0x4e>
 692:	7e f4       	brtc	.+30     	; 0x6b2 <__addsf3x+0x7c>
 694:	1f 16       	cp	r1, r31
 696:	ba 0b       	sbc	r27, r26
 698:	62 0b       	sbc	r22, r18
 69a:	73 0b       	sbc	r23, r19
 69c:	84 0b       	sbc	r24, r20
 69e:	ba f0       	brmi	.+46     	; 0x6ce <__addsf3x+0x98>
 6a0:	91 50       	subi	r25, 0x01	; 1
 6a2:	a1 f0       	breq	.+40     	; 0x6cc <__addsf3x+0x96>
 6a4:	ff 0f       	add	r31, r31
 6a6:	bb 1f       	adc	r27, r27
 6a8:	66 1f       	adc	r22, r22
 6aa:	77 1f       	adc	r23, r23
 6ac:	88 1f       	adc	r24, r24
 6ae:	c2 f7       	brpl	.-16     	; 0x6a0 <__addsf3x+0x6a>
 6b0:	0e c0       	rjmp	.+28     	; 0x6ce <__addsf3x+0x98>
 6b2:	ba 0f       	add	r27, r26
 6b4:	62 1f       	adc	r22, r18
 6b6:	73 1f       	adc	r23, r19
 6b8:	84 1f       	adc	r24, r20
 6ba:	48 f4       	brcc	.+18     	; 0x6ce <__addsf3x+0x98>
 6bc:	87 95       	ror	r24
 6be:	77 95       	ror	r23
 6c0:	67 95       	ror	r22
 6c2:	b7 95       	ror	r27
 6c4:	f7 95       	ror	r31
 6c6:	9e 3f       	cpi	r25, 0xFE	; 254
 6c8:	08 f0       	brcs	.+2      	; 0x6cc <__addsf3x+0x96>
 6ca:	b3 cf       	rjmp	.-154    	; 0x632 <__addsf3+0x1e>
 6cc:	93 95       	inc	r25
 6ce:	88 0f       	add	r24, r24
 6d0:	08 f0       	brcs	.+2      	; 0x6d4 <__addsf3x+0x9e>
 6d2:	99 27       	eor	r25, r25
 6d4:	ee 0f       	add	r30, r30
 6d6:	97 95       	ror	r25
 6d8:	87 95       	ror	r24
 6da:	08 95       	ret

000006dc <__cmpsf2>:
 6dc:	d4 d0       	rcall	.+424    	; 0x886 <__fp_cmp>
 6de:	08 f4       	brcc	.+2      	; 0x6e2 <__cmpsf2+0x6>
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	08 95       	ret

000006e4 <__divsf3>:
 6e4:	0c d0       	rcall	.+24     	; 0x6fe <__divsf3x>
 6e6:	0a c1       	rjmp	.+532    	; 0x8fc <__fp_round>
 6e8:	02 d1       	rcall	.+516    	; 0x8ee <__fp_pscB>
 6ea:	40 f0       	brcs	.+16     	; 0x6fc <__divsf3+0x18>
 6ec:	f9 d0       	rcall	.+498    	; 0x8e0 <__fp_pscA>
 6ee:	30 f0       	brcs	.+12     	; 0x6fc <__divsf3+0x18>
 6f0:	21 f4       	brne	.+8      	; 0x6fa <__divsf3+0x16>
 6f2:	5f 3f       	cpi	r21, 0xFF	; 255
 6f4:	19 f0       	breq	.+6      	; 0x6fc <__divsf3+0x18>
 6f6:	eb c0       	rjmp	.+470    	; 0x8ce <__fp_inf>
 6f8:	51 11       	cpse	r21, r1
 6fa:	34 c1       	rjmp	.+616    	; 0x964 <__fp_szero>
 6fc:	ee c0       	rjmp	.+476    	; 0x8da <__fp_nan>

000006fe <__divsf3x>:
 6fe:	0f d1       	rcall	.+542    	; 0x91e <__fp_split3>
 700:	98 f3       	brcs	.-26     	; 0x6e8 <__divsf3+0x4>

00000702 <__divsf3_pse>:
 702:	99 23       	and	r25, r25
 704:	c9 f3       	breq	.-14     	; 0x6f8 <__divsf3+0x14>
 706:	55 23       	and	r21, r21
 708:	b1 f3       	breq	.-20     	; 0x6f6 <__divsf3+0x12>
 70a:	95 1b       	sub	r25, r21
 70c:	55 0b       	sbc	r21, r21
 70e:	bb 27       	eor	r27, r27
 710:	aa 27       	eor	r26, r26
 712:	62 17       	cp	r22, r18
 714:	73 07       	cpc	r23, r19
 716:	84 07       	cpc	r24, r20
 718:	38 f0       	brcs	.+14     	; 0x728 <__divsf3_pse+0x26>
 71a:	9f 5f       	subi	r25, 0xFF	; 255
 71c:	5f 4f       	sbci	r21, 0xFF	; 255
 71e:	22 0f       	add	r18, r18
 720:	33 1f       	adc	r19, r19
 722:	44 1f       	adc	r20, r20
 724:	aa 1f       	adc	r26, r26
 726:	a9 f3       	breq	.-22     	; 0x712 <__divsf3_pse+0x10>
 728:	33 d0       	rcall	.+102    	; 0x790 <__divsf3_pse+0x8e>
 72a:	0e 2e       	mov	r0, r30
 72c:	3a f0       	brmi	.+14     	; 0x73c <__divsf3_pse+0x3a>
 72e:	e0 e8       	ldi	r30, 0x80	; 128
 730:	30 d0       	rcall	.+96     	; 0x792 <__divsf3_pse+0x90>
 732:	91 50       	subi	r25, 0x01	; 1
 734:	50 40       	sbci	r21, 0x00	; 0
 736:	e6 95       	lsr	r30
 738:	00 1c       	adc	r0, r0
 73a:	ca f7       	brpl	.-14     	; 0x72e <__divsf3_pse+0x2c>
 73c:	29 d0       	rcall	.+82     	; 0x790 <__divsf3_pse+0x8e>
 73e:	fe 2f       	mov	r31, r30
 740:	27 d0       	rcall	.+78     	; 0x790 <__divsf3_pse+0x8e>
 742:	66 0f       	add	r22, r22
 744:	77 1f       	adc	r23, r23
 746:	88 1f       	adc	r24, r24
 748:	bb 1f       	adc	r27, r27
 74a:	26 17       	cp	r18, r22
 74c:	37 07       	cpc	r19, r23
 74e:	48 07       	cpc	r20, r24
 750:	ab 07       	cpc	r26, r27
 752:	b0 e8       	ldi	r27, 0x80	; 128
 754:	09 f0       	breq	.+2      	; 0x758 <__divsf3_pse+0x56>
 756:	bb 0b       	sbc	r27, r27
 758:	80 2d       	mov	r24, r0
 75a:	bf 01       	movw	r22, r30
 75c:	ff 27       	eor	r31, r31
 75e:	93 58       	subi	r25, 0x83	; 131
 760:	5f 4f       	sbci	r21, 0xFF	; 255
 762:	2a f0       	brmi	.+10     	; 0x76e <__divsf3_pse+0x6c>
 764:	9e 3f       	cpi	r25, 0xFE	; 254
 766:	51 05       	cpc	r21, r1
 768:	68 f0       	brcs	.+26     	; 0x784 <__divsf3_pse+0x82>
 76a:	b1 c0       	rjmp	.+354    	; 0x8ce <__fp_inf>
 76c:	fb c0       	rjmp	.+502    	; 0x964 <__fp_szero>
 76e:	5f 3f       	cpi	r21, 0xFF	; 255
 770:	ec f3       	brlt	.-6      	; 0x76c <__divsf3_pse+0x6a>
 772:	98 3e       	cpi	r25, 0xE8	; 232
 774:	dc f3       	brlt	.-10     	; 0x76c <__divsf3_pse+0x6a>
 776:	86 95       	lsr	r24
 778:	77 95       	ror	r23
 77a:	67 95       	ror	r22
 77c:	b7 95       	ror	r27
 77e:	f7 95       	ror	r31
 780:	9f 5f       	subi	r25, 0xFF	; 255
 782:	c9 f7       	brne	.-14     	; 0x776 <__divsf3_pse+0x74>
 784:	88 0f       	add	r24, r24
 786:	91 1d       	adc	r25, r1
 788:	96 95       	lsr	r25
 78a:	87 95       	ror	r24
 78c:	97 f9       	bld	r25, 7
 78e:	08 95       	ret
 790:	e1 e0       	ldi	r30, 0x01	; 1
 792:	66 0f       	add	r22, r22
 794:	77 1f       	adc	r23, r23
 796:	88 1f       	adc	r24, r24
 798:	bb 1f       	adc	r27, r27
 79a:	62 17       	cp	r22, r18
 79c:	73 07       	cpc	r23, r19
 79e:	84 07       	cpc	r24, r20
 7a0:	ba 07       	cpc	r27, r26
 7a2:	20 f0       	brcs	.+8      	; 0x7ac <__divsf3_pse+0xaa>
 7a4:	62 1b       	sub	r22, r18
 7a6:	73 0b       	sbc	r23, r19
 7a8:	84 0b       	sbc	r24, r20
 7aa:	ba 0b       	sbc	r27, r26
 7ac:	ee 1f       	adc	r30, r30
 7ae:	88 f7       	brcc	.-30     	; 0x792 <__divsf3_pse+0x90>
 7b0:	e0 95       	com	r30
 7b2:	08 95       	ret

000007b4 <__fixunssfsi>:
 7b4:	bc d0       	rcall	.+376    	; 0x92e <__fp_splitA>
 7b6:	88 f0       	brcs	.+34     	; 0x7da <__fixunssfsi+0x26>
 7b8:	9f 57       	subi	r25, 0x7F	; 127
 7ba:	90 f0       	brcs	.+36     	; 0x7e0 <__fixunssfsi+0x2c>
 7bc:	b9 2f       	mov	r27, r25
 7be:	99 27       	eor	r25, r25
 7c0:	b7 51       	subi	r27, 0x17	; 23
 7c2:	a0 f0       	brcs	.+40     	; 0x7ec <__fixunssfsi+0x38>
 7c4:	d1 f0       	breq	.+52     	; 0x7fa <__fixunssfsi+0x46>
 7c6:	66 0f       	add	r22, r22
 7c8:	77 1f       	adc	r23, r23
 7ca:	88 1f       	adc	r24, r24
 7cc:	99 1f       	adc	r25, r25
 7ce:	1a f0       	brmi	.+6      	; 0x7d6 <__fixunssfsi+0x22>
 7d0:	ba 95       	dec	r27
 7d2:	c9 f7       	brne	.-14     	; 0x7c6 <__fixunssfsi+0x12>
 7d4:	12 c0       	rjmp	.+36     	; 0x7fa <__fixunssfsi+0x46>
 7d6:	b1 30       	cpi	r27, 0x01	; 1
 7d8:	81 f0       	breq	.+32     	; 0x7fa <__fixunssfsi+0x46>
 7da:	c3 d0       	rcall	.+390    	; 0x962 <__fp_zero>
 7dc:	b1 e0       	ldi	r27, 0x01	; 1
 7de:	08 95       	ret
 7e0:	c0 c0       	rjmp	.+384    	; 0x962 <__fp_zero>
 7e2:	67 2f       	mov	r22, r23
 7e4:	78 2f       	mov	r23, r24
 7e6:	88 27       	eor	r24, r24
 7e8:	b8 5f       	subi	r27, 0xF8	; 248
 7ea:	39 f0       	breq	.+14     	; 0x7fa <__fixunssfsi+0x46>
 7ec:	b9 3f       	cpi	r27, 0xF9	; 249
 7ee:	cc f3       	brlt	.-14     	; 0x7e2 <__fixunssfsi+0x2e>
 7f0:	86 95       	lsr	r24
 7f2:	77 95       	ror	r23
 7f4:	67 95       	ror	r22
 7f6:	b3 95       	inc	r27
 7f8:	d9 f7       	brne	.-10     	; 0x7f0 <__fixunssfsi+0x3c>
 7fa:	3e f4       	brtc	.+14     	; 0x80a <__fixunssfsi+0x56>
 7fc:	90 95       	com	r25
 7fe:	80 95       	com	r24
 800:	70 95       	com	r23
 802:	61 95       	neg	r22
 804:	7f 4f       	sbci	r23, 0xFF	; 255
 806:	8f 4f       	sbci	r24, 0xFF	; 255
 808:	9f 4f       	sbci	r25, 0xFF	; 255
 80a:	08 95       	ret

0000080c <__floatunsisf>:
 80c:	e8 94       	clt
 80e:	09 c0       	rjmp	.+18     	; 0x822 <__floatsisf+0x12>

00000810 <__floatsisf>:
 810:	97 fb       	bst	r25, 7
 812:	3e f4       	brtc	.+14     	; 0x822 <__floatsisf+0x12>
 814:	90 95       	com	r25
 816:	80 95       	com	r24
 818:	70 95       	com	r23
 81a:	61 95       	neg	r22
 81c:	7f 4f       	sbci	r23, 0xFF	; 255
 81e:	8f 4f       	sbci	r24, 0xFF	; 255
 820:	9f 4f       	sbci	r25, 0xFF	; 255
 822:	99 23       	and	r25, r25
 824:	a9 f0       	breq	.+42     	; 0x850 <__floatsisf+0x40>
 826:	f9 2f       	mov	r31, r25
 828:	96 e9       	ldi	r25, 0x96	; 150
 82a:	bb 27       	eor	r27, r27
 82c:	93 95       	inc	r25
 82e:	f6 95       	lsr	r31
 830:	87 95       	ror	r24
 832:	77 95       	ror	r23
 834:	67 95       	ror	r22
 836:	b7 95       	ror	r27
 838:	f1 11       	cpse	r31, r1
 83a:	f8 cf       	rjmp	.-16     	; 0x82c <__floatsisf+0x1c>
 83c:	fa f4       	brpl	.+62     	; 0x87c <__floatsisf+0x6c>
 83e:	bb 0f       	add	r27, r27
 840:	11 f4       	brne	.+4      	; 0x846 <__floatsisf+0x36>
 842:	60 ff       	sbrs	r22, 0
 844:	1b c0       	rjmp	.+54     	; 0x87c <__floatsisf+0x6c>
 846:	6f 5f       	subi	r22, 0xFF	; 255
 848:	7f 4f       	sbci	r23, 0xFF	; 255
 84a:	8f 4f       	sbci	r24, 0xFF	; 255
 84c:	9f 4f       	sbci	r25, 0xFF	; 255
 84e:	16 c0       	rjmp	.+44     	; 0x87c <__floatsisf+0x6c>
 850:	88 23       	and	r24, r24
 852:	11 f0       	breq	.+4      	; 0x858 <__floatsisf+0x48>
 854:	96 e9       	ldi	r25, 0x96	; 150
 856:	11 c0       	rjmp	.+34     	; 0x87a <__floatsisf+0x6a>
 858:	77 23       	and	r23, r23
 85a:	21 f0       	breq	.+8      	; 0x864 <__floatsisf+0x54>
 85c:	9e e8       	ldi	r25, 0x8E	; 142
 85e:	87 2f       	mov	r24, r23
 860:	76 2f       	mov	r23, r22
 862:	05 c0       	rjmp	.+10     	; 0x86e <__floatsisf+0x5e>
 864:	66 23       	and	r22, r22
 866:	71 f0       	breq	.+28     	; 0x884 <__floatsisf+0x74>
 868:	96 e8       	ldi	r25, 0x86	; 134
 86a:	86 2f       	mov	r24, r22
 86c:	70 e0       	ldi	r23, 0x00	; 0
 86e:	60 e0       	ldi	r22, 0x00	; 0
 870:	2a f0       	brmi	.+10     	; 0x87c <__floatsisf+0x6c>
 872:	9a 95       	dec	r25
 874:	66 0f       	add	r22, r22
 876:	77 1f       	adc	r23, r23
 878:	88 1f       	adc	r24, r24
 87a:	da f7       	brpl	.-10     	; 0x872 <__floatsisf+0x62>
 87c:	88 0f       	add	r24, r24
 87e:	96 95       	lsr	r25
 880:	87 95       	ror	r24
 882:	97 f9       	bld	r25, 7
 884:	08 95       	ret

00000886 <__fp_cmp>:
 886:	99 0f       	add	r25, r25
 888:	00 08       	sbc	r0, r0
 88a:	55 0f       	add	r21, r21
 88c:	aa 0b       	sbc	r26, r26
 88e:	e0 e8       	ldi	r30, 0x80	; 128
 890:	fe ef       	ldi	r31, 0xFE	; 254
 892:	16 16       	cp	r1, r22
 894:	17 06       	cpc	r1, r23
 896:	e8 07       	cpc	r30, r24
 898:	f9 07       	cpc	r31, r25
 89a:	c0 f0       	brcs	.+48     	; 0x8cc <__fp_cmp+0x46>
 89c:	12 16       	cp	r1, r18
 89e:	13 06       	cpc	r1, r19
 8a0:	e4 07       	cpc	r30, r20
 8a2:	f5 07       	cpc	r31, r21
 8a4:	98 f0       	brcs	.+38     	; 0x8cc <__fp_cmp+0x46>
 8a6:	62 1b       	sub	r22, r18
 8a8:	73 0b       	sbc	r23, r19
 8aa:	84 0b       	sbc	r24, r20
 8ac:	95 0b       	sbc	r25, r21
 8ae:	39 f4       	brne	.+14     	; 0x8be <__fp_cmp+0x38>
 8b0:	0a 26       	eor	r0, r26
 8b2:	61 f0       	breq	.+24     	; 0x8cc <__fp_cmp+0x46>
 8b4:	23 2b       	or	r18, r19
 8b6:	24 2b       	or	r18, r20
 8b8:	25 2b       	or	r18, r21
 8ba:	21 f4       	brne	.+8      	; 0x8c4 <__fp_cmp+0x3e>
 8bc:	08 95       	ret
 8be:	0a 26       	eor	r0, r26
 8c0:	09 f4       	brne	.+2      	; 0x8c4 <__fp_cmp+0x3e>
 8c2:	a1 40       	sbci	r26, 0x01	; 1
 8c4:	a6 95       	lsr	r26
 8c6:	8f ef       	ldi	r24, 0xFF	; 255
 8c8:	81 1d       	adc	r24, r1
 8ca:	81 1d       	adc	r24, r1
 8cc:	08 95       	ret

000008ce <__fp_inf>:
 8ce:	97 f9       	bld	r25, 7
 8d0:	9f 67       	ori	r25, 0x7F	; 127
 8d2:	80 e8       	ldi	r24, 0x80	; 128
 8d4:	70 e0       	ldi	r23, 0x00	; 0
 8d6:	60 e0       	ldi	r22, 0x00	; 0
 8d8:	08 95       	ret

000008da <__fp_nan>:
 8da:	9f ef       	ldi	r25, 0xFF	; 255
 8dc:	80 ec       	ldi	r24, 0xC0	; 192
 8de:	08 95       	ret

000008e0 <__fp_pscA>:
 8e0:	00 24       	eor	r0, r0
 8e2:	0a 94       	dec	r0
 8e4:	16 16       	cp	r1, r22
 8e6:	17 06       	cpc	r1, r23
 8e8:	18 06       	cpc	r1, r24
 8ea:	09 06       	cpc	r0, r25
 8ec:	08 95       	ret

000008ee <__fp_pscB>:
 8ee:	00 24       	eor	r0, r0
 8f0:	0a 94       	dec	r0
 8f2:	12 16       	cp	r1, r18
 8f4:	13 06       	cpc	r1, r19
 8f6:	14 06       	cpc	r1, r20
 8f8:	05 06       	cpc	r0, r21
 8fa:	08 95       	ret

000008fc <__fp_round>:
 8fc:	09 2e       	mov	r0, r25
 8fe:	03 94       	inc	r0
 900:	00 0c       	add	r0, r0
 902:	11 f4       	brne	.+4      	; 0x908 <__fp_round+0xc>
 904:	88 23       	and	r24, r24
 906:	52 f0       	brmi	.+20     	; 0x91c <__fp_round+0x20>
 908:	bb 0f       	add	r27, r27
 90a:	40 f4       	brcc	.+16     	; 0x91c <__fp_round+0x20>
 90c:	bf 2b       	or	r27, r31
 90e:	11 f4       	brne	.+4      	; 0x914 <__fp_round+0x18>
 910:	60 ff       	sbrs	r22, 0
 912:	04 c0       	rjmp	.+8      	; 0x91c <__fp_round+0x20>
 914:	6f 5f       	subi	r22, 0xFF	; 255
 916:	7f 4f       	sbci	r23, 0xFF	; 255
 918:	8f 4f       	sbci	r24, 0xFF	; 255
 91a:	9f 4f       	sbci	r25, 0xFF	; 255
 91c:	08 95       	ret

0000091e <__fp_split3>:
 91e:	57 fd       	sbrc	r21, 7
 920:	90 58       	subi	r25, 0x80	; 128
 922:	44 0f       	add	r20, r20
 924:	55 1f       	adc	r21, r21
 926:	59 f0       	breq	.+22     	; 0x93e <__fp_splitA+0x10>
 928:	5f 3f       	cpi	r21, 0xFF	; 255
 92a:	71 f0       	breq	.+28     	; 0x948 <__fp_splitA+0x1a>
 92c:	47 95       	ror	r20

0000092e <__fp_splitA>:
 92e:	88 0f       	add	r24, r24
 930:	97 fb       	bst	r25, 7
 932:	99 1f       	adc	r25, r25
 934:	61 f0       	breq	.+24     	; 0x94e <__fp_splitA+0x20>
 936:	9f 3f       	cpi	r25, 0xFF	; 255
 938:	79 f0       	breq	.+30     	; 0x958 <__fp_splitA+0x2a>
 93a:	87 95       	ror	r24
 93c:	08 95       	ret
 93e:	12 16       	cp	r1, r18
 940:	13 06       	cpc	r1, r19
 942:	14 06       	cpc	r1, r20
 944:	55 1f       	adc	r21, r21
 946:	f2 cf       	rjmp	.-28     	; 0x92c <__fp_split3+0xe>
 948:	46 95       	lsr	r20
 94a:	f1 df       	rcall	.-30     	; 0x92e <__fp_splitA>
 94c:	08 c0       	rjmp	.+16     	; 0x95e <__fp_splitA+0x30>
 94e:	16 16       	cp	r1, r22
 950:	17 06       	cpc	r1, r23
 952:	18 06       	cpc	r1, r24
 954:	99 1f       	adc	r25, r25
 956:	f1 cf       	rjmp	.-30     	; 0x93a <__fp_splitA+0xc>
 958:	86 95       	lsr	r24
 95a:	71 05       	cpc	r23, r1
 95c:	61 05       	cpc	r22, r1
 95e:	08 94       	sec
 960:	08 95       	ret

00000962 <__fp_zero>:
 962:	e8 94       	clt

00000964 <__fp_szero>:
 964:	bb 27       	eor	r27, r27
 966:	66 27       	eor	r22, r22
 968:	77 27       	eor	r23, r23
 96a:	cb 01       	movw	r24, r22
 96c:	97 f9       	bld	r25, 7
 96e:	08 95       	ret

00000970 <__gesf2>:
 970:	8a df       	rcall	.-236    	; 0x886 <__fp_cmp>
 972:	08 f4       	brcc	.+2      	; 0x976 <__gesf2+0x6>
 974:	8f ef       	ldi	r24, 0xFF	; 255
 976:	08 95       	ret

00000978 <__mulsf3>:
 978:	0b d0       	rcall	.+22     	; 0x990 <__mulsf3x>
 97a:	c0 cf       	rjmp	.-128    	; 0x8fc <__fp_round>
 97c:	b1 df       	rcall	.-158    	; 0x8e0 <__fp_pscA>
 97e:	28 f0       	brcs	.+10     	; 0x98a <__mulsf3+0x12>
 980:	b6 df       	rcall	.-148    	; 0x8ee <__fp_pscB>
 982:	18 f0       	brcs	.+6      	; 0x98a <__mulsf3+0x12>
 984:	95 23       	and	r25, r21
 986:	09 f0       	breq	.+2      	; 0x98a <__mulsf3+0x12>
 988:	a2 cf       	rjmp	.-188    	; 0x8ce <__fp_inf>
 98a:	a7 cf       	rjmp	.-178    	; 0x8da <__fp_nan>
 98c:	11 24       	eor	r1, r1
 98e:	ea cf       	rjmp	.-44     	; 0x964 <__fp_szero>

00000990 <__mulsf3x>:
 990:	c6 df       	rcall	.-116    	; 0x91e <__fp_split3>
 992:	a0 f3       	brcs	.-24     	; 0x97c <__mulsf3+0x4>

00000994 <__mulsf3_pse>:
 994:	95 9f       	mul	r25, r21
 996:	d1 f3       	breq	.-12     	; 0x98c <__mulsf3+0x14>
 998:	95 0f       	add	r25, r21
 99a:	50 e0       	ldi	r21, 0x00	; 0
 99c:	55 1f       	adc	r21, r21
 99e:	62 9f       	mul	r22, r18
 9a0:	f0 01       	movw	r30, r0
 9a2:	72 9f       	mul	r23, r18
 9a4:	bb 27       	eor	r27, r27
 9a6:	f0 0d       	add	r31, r0
 9a8:	b1 1d       	adc	r27, r1
 9aa:	63 9f       	mul	r22, r19
 9ac:	aa 27       	eor	r26, r26
 9ae:	f0 0d       	add	r31, r0
 9b0:	b1 1d       	adc	r27, r1
 9b2:	aa 1f       	adc	r26, r26
 9b4:	64 9f       	mul	r22, r20
 9b6:	66 27       	eor	r22, r22
 9b8:	b0 0d       	add	r27, r0
 9ba:	a1 1d       	adc	r26, r1
 9bc:	66 1f       	adc	r22, r22
 9be:	82 9f       	mul	r24, r18
 9c0:	22 27       	eor	r18, r18
 9c2:	b0 0d       	add	r27, r0
 9c4:	a1 1d       	adc	r26, r1
 9c6:	62 1f       	adc	r22, r18
 9c8:	73 9f       	mul	r23, r19
 9ca:	b0 0d       	add	r27, r0
 9cc:	a1 1d       	adc	r26, r1
 9ce:	62 1f       	adc	r22, r18
 9d0:	83 9f       	mul	r24, r19
 9d2:	a0 0d       	add	r26, r0
 9d4:	61 1d       	adc	r22, r1
 9d6:	22 1f       	adc	r18, r18
 9d8:	74 9f       	mul	r23, r20
 9da:	33 27       	eor	r19, r19
 9dc:	a0 0d       	add	r26, r0
 9de:	61 1d       	adc	r22, r1
 9e0:	23 1f       	adc	r18, r19
 9e2:	84 9f       	mul	r24, r20
 9e4:	60 0d       	add	r22, r0
 9e6:	21 1d       	adc	r18, r1
 9e8:	82 2f       	mov	r24, r18
 9ea:	76 2f       	mov	r23, r22
 9ec:	6a 2f       	mov	r22, r26
 9ee:	11 24       	eor	r1, r1
 9f0:	9f 57       	subi	r25, 0x7F	; 127
 9f2:	50 40       	sbci	r21, 0x00	; 0
 9f4:	8a f0       	brmi	.+34     	; 0xa18 <__mulsf3_pse+0x84>
 9f6:	e1 f0       	breq	.+56     	; 0xa30 <__mulsf3_pse+0x9c>
 9f8:	88 23       	and	r24, r24
 9fa:	4a f0       	brmi	.+18     	; 0xa0e <__mulsf3_pse+0x7a>
 9fc:	ee 0f       	add	r30, r30
 9fe:	ff 1f       	adc	r31, r31
 a00:	bb 1f       	adc	r27, r27
 a02:	66 1f       	adc	r22, r22
 a04:	77 1f       	adc	r23, r23
 a06:	88 1f       	adc	r24, r24
 a08:	91 50       	subi	r25, 0x01	; 1
 a0a:	50 40       	sbci	r21, 0x00	; 0
 a0c:	a9 f7       	brne	.-22     	; 0x9f8 <__mulsf3_pse+0x64>
 a0e:	9e 3f       	cpi	r25, 0xFE	; 254
 a10:	51 05       	cpc	r21, r1
 a12:	70 f0       	brcs	.+28     	; 0xa30 <__mulsf3_pse+0x9c>
 a14:	5c cf       	rjmp	.-328    	; 0x8ce <__fp_inf>
 a16:	a6 cf       	rjmp	.-180    	; 0x964 <__fp_szero>
 a18:	5f 3f       	cpi	r21, 0xFF	; 255
 a1a:	ec f3       	brlt	.-6      	; 0xa16 <__mulsf3_pse+0x82>
 a1c:	98 3e       	cpi	r25, 0xE8	; 232
 a1e:	dc f3       	brlt	.-10     	; 0xa16 <__mulsf3_pse+0x82>
 a20:	86 95       	lsr	r24
 a22:	77 95       	ror	r23
 a24:	67 95       	ror	r22
 a26:	b7 95       	ror	r27
 a28:	f7 95       	ror	r31
 a2a:	e7 95       	ror	r30
 a2c:	9f 5f       	subi	r25, 0xFF	; 255
 a2e:	c1 f7       	brne	.-16     	; 0xa20 <__mulsf3_pse+0x8c>
 a30:	fe 2b       	or	r31, r30
 a32:	88 0f       	add	r24, r24
 a34:	91 1d       	adc	r25, r1
 a36:	96 95       	lsr	r25
 a38:	87 95       	ror	r24
 a3a:	97 f9       	bld	r25, 7
 a3c:	08 95       	ret

00000a3e <_exit>:
 a3e:	f8 94       	cli

00000a40 <__stop_program>:
 a40:	ff cf       	rjmp	.-2      	; 0xa40 <__stop_program>
